* Emacs Twist for Nix
[[https://github.com/akirak/emacs-twist/actions/workflows/test.yml][file:https://github.com/akirak/emacs-twist/actions/workflows/test.yml/badge.svg]]

Emacs Twist is an alternative Emacs Lisp build machinery for Nix.

The goal of this project is to support the following two use cases:

- Let people manage their Emacs configurations using Nix in a reproducible way.
- Help with testing of Emacs Lisp packages that have difficult dependencies, such as dynamic modules and Emacs Lisp packages that are not on any package registry.

While those use cases are already possible with the standard Emacs infrastructure of Nixpkgs, it was difficult for its users to contribute to packages they are using, compared to [[https://github.com/raxod502/straight.el][straight.el]].
It is basically a Nix expression generator for packages on ELPA and MELPA, and it assumed that users always want latest packages.
It was a tedious process to add manual packages or temporarily override sources.

The goal of this project is to create a Nix machinery that builds packages from sources.
It should let the user have full control of package sources.
Builds are pure when all packages are locked.

It is still an alpha version, so there may be breaking changes.

Note that this framework is not compatible with [[https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/emacs/generic.nix][the Emacs infrastructure]] of Nixpkgs.
This repository provides the core library, and it should be stable.
I don't want to constantly follow updates in the Nixpkgs and [[https://github.com/nix-community/emacs-overlay][emacs-overlay]].
They are great projects, but this project does not reuse the infrastructure.
An entire infrastructure was written from scratch, and this would allow keeping each configuration explicit and predictable.
No package workarounds are turned on by default, nor will I include such things in this repository.

Nonetheless, it would be possible to provide workarounds as an overlay from a separate repository.
If this project turns out to be viable, I will do that.
** Related projects
[[https://github.com/akirak/twist.el][Twist.el]] is a work-in-progress Emacs frontend to Twist.
It is just a little fancy wrapper, and its use is optional.
You can build a configuration without twist.el, and a configuration built with Twist doesn't require Twist.el to run.
** Examples
- I am preparing [[https://github.com/akirak/emacs-twist-examples][a repository of configuration examples]].
- The author's [[https://github.com/akirak/nix-config][nix-config]] repository uses Twist.
